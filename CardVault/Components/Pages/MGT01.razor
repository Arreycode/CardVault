@page "/MGT01"
@using CardVault.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedSessionStorage sessionStorage

@using CardVault.ModelsDTO
@using System.Linq

<head>
    <title>CARDS COLLECTION</title>
    <link rel="stylesheet" href="css/MGT01.css" />
</head>

<h3>Cards</h3>

<div class="search-container">
    <input type="text" class="search-field" placeholder="Search" @bind="searchQuery" @bind:event="oninput" />
    <button type="button" class="search-btn" @onclick="FilterResults">
        <i class="fas fa-search"></i> Search
    </button>
    <br><br>
</div>

<div class="search-container">
    <select @bind="FilterParameters.RarityCodeFilter">
        <option value="">Rarity Code</option>
        <option value="C">Common</option>
        <option value="U">Uncommon</option>
        <option value="R">Rare</option>
        <option value="M">Mythic</option>
        <option value="S">Special</option>
        <option value="B">Bonus</option>
    </select>

    <select @bind="FilterParameters.ColorFilter">
        <option value="">Color</option>
        <option value="White">White</option>
        <option value="Black">Black</option>
        <option value="Blue">Blue</option>
        <option value="Red">Red</option>
        <option value="Green">Green</option>
    </select>








    <select @bind="FilterParameters.ManaCostFilter">
        <option value="">Mana Cost</option>
        @for (int i = 0; i <= 16; i++)
        {
            <option value="@i">@i</option>
        }
        <option value="1000000">1000000</option>
    </select>







    <select @bind="FilterParameters.TypeFilter">
        <option value="">Type</option>
        <option value="Artifact">Artifact</option>
        <option value="Wolf">Wolf</option>
        <option value="Knights">Knights</option>
        <option value="Instant">Instant</option>
        <option value="Planeswalker">Planeswalker</option>
        <option value="Jaguar">Jaguar</option>
        <option value="Goblin">Goblin</option>
        <option value="See">See</option>
        <option value="Enchantment">Enchantment</option>
        <option value="Elemental">Elemental</option>
        <option value="Scariest">Scariest</option>
        <option value="Hero">Hero</option>
        <option value="Dragon">Dragon</option>
        <option value="Land">Land</option>
        <option value="Tribal">Tribal</option>
        <option value="Specter">Specter</option>
        <option value="Eaturecray">Eaturecray</option>
        <option value="Summon">Summon</option>
        <option value="Scheme">Scheme</option>
        <option value="Ever">Ever</option>
        <option value="Phenomenon">Phenomenon</option>
        <option value="Creature">Creature</option>
        <option value="Vanguard">Vanguard</option>
        <option value="You’ll">You’ll</option>
        <option value="Plane">Plane</option>
        <option value="Sorcery">Sorcery</option>
        <option value="Conspiracy">Conspiracy</option>
    </select>

    <button type="button" class="filter-btn" @onclick="FilterResults">
        Apply Filters
    </button>
    <button type="button" class="filter-btn" @onclick="ResetFilter">
        Reset
    </button>
</div>

<ul class="image-list">
    @if (pagedCards != null && pagedCards.Any())
    {
        @foreach (var card in pagedCards)
        {
            <li>
                <span class="card-title">
                    <a href="/redcarddetail/@card.Id">@card.Name</a> <br />
                    <button class="bookmark-btn" @onclick="() => ToggleBookmark(card.Id)">
                        <i class="@GetBookmarkIconClass(card.Id)"></i>
                    </button>
                </span>
                <!-- Load images without lazy loading -->
                <img width="50" src="@(!string.IsNullOrEmpty(card.OriginalImageUrl) ? card.OriginalImageUrl : "images/placeholder.png")" alt="@card.Name" />
            </li>
        }
    }
    else
    {
        <li>No cards found</li>
    }
</ul>

@if (totalPages > 1)
{
    <div class="pagination">
        <button @onclick="() => OnPageChanged(currentPage - 1)" disabled="@IsPreviousDisabled">Previous</button>

        @for (int i = 1; i <= totalPages; i++)
        {
            <button @onclick="() => OnPageChanged(i)" class="@(currentPage == i ? "active" : "")">
                @i
            </button>
        }

        <button @onclick="() => OnPageChanged(currentPage + 1)" disabled="@IsNextDisabled">Next</button>
    </div>
}

@code {
    private IList<CardModelClass> myCards;
    private IList<CardModelClass> filteredCards;
    private IList<CardModelClass> pagedCards;
    private string searchQuery = string.Empty;
    private FilterParameters FilterParameters = new FilterParameters();

    private IList<long> bookmarkedItems = new List<long>();

    private int currentPage = 1;
    private int totalPages;
    private int pageSize = 10; // Number of cards per page

    protected override async Task OnInitializedAsync()
    {
        // Load all cards initially
        myCards = Services.GetAllCards();
        filteredCards = myCards;
        await LoadBookmarkedItemsAsync();
        UpdatePagedCards();
    }






    private void FilterResults()
    {
        filteredCards = myCards.Where(card =>
            (string.IsNullOrEmpty(FilterParameters.RarityCodeFilter) || card.RarityCode == FilterParameters.RarityCodeFilter) &&
            (string.IsNullOrEmpty(FilterParameters.ColorFilter) || (card.Colors != null && card.Colors.Contains(FilterParameters.ColorFilter))) &&
            (string.IsNullOrEmpty(FilterParameters.ManaCostFilter) ||
                (!string.IsNullOrEmpty(card.ManaCost) && card.ManaCost.Contains(FilterParameters.ManaCostFilter))) &&
            (string.IsNullOrEmpty(FilterParameters.TypeFilter) ||
                (card.Type != null && card.Type.Split(", ").Contains(FilterParameters.TypeFilter))) &&  // Adjusted for type matching
            (string.IsNullOrEmpty(searchQuery) || (card.Name != null && card.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)))
        ).ToList();

        UpdatePagedCards();
    }














    private void ResetFilter()
    {
        FilterParameters = new FilterParameters();
        filteredCards = myCards;
        UpdatePagedCards();
    }

    private async Task LoadBookmarkedItemsAsync()
    {
        var result = await sessionStorage.GetAsync<List<long>>("bookmarkedItems");
        if (result.Success)
        {
            bookmarkedItems = result.Value ?? new List<long>();
        }
    }

    private async Task ToggleBookmark(long id)
    {
        if (bookmarkedItems.Contains(id))
        {
            bookmarkedItems.Remove(id);
        }
        else
        {
            bookmarkedItems.Add(id);
        }
        await sessionStorage.SetAsync("bookmarkedItems", bookmarkedItems);
    }

    private string GetBookmarkIconClass(long id)
    {
        return bookmarkedItems.Contains(id) ? "fas fa-heart" : "far fa-heart";
    }

    private void UpdatePagedCards()
    {
        totalPages = (int)Math.Ceiling(filteredCards.Count / (double)pageSize);
        pagedCards = filteredCards.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void OnPageChanged(int newPage)
    {
        if (newPage >= 1 && newPage <= totalPages)
        {
            currentPage = newPage;
            UpdatePagedCards();
        }
    }

    private bool IsPreviousDisabled => currentPage <= 1;
    private bool IsNextDisabled => currentPage >= totalPages;
}
