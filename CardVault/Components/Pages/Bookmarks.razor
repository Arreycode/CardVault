@page "/Bookmarks"

@using CardVault.ModelsDTO
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@using Microsoft.EntityFrameworkCore
@using System.Linq
@using CardVault.Services
@rendermode InteractiveServer

<head>
    <title>Bookmarks Page</title>
    <link rel="stylesheet" href="css/MGT01.css" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
</head>

<h3>Bookmarks</h3>

<div class="search-container">
    <input type="text" class="search-field" placeholder="Search" @bind="searchQuery" @bind:event="oninput" />
    <button type="button" class="search-btn" @onclick="FilterResults">
        <i class="fas fa-search"></i> Search
    </button>
</div>

<div class="search-container">
    <select @bind="FilterParameters.RarityCodeFilter">
        <option value="">Rarity Code</option>
        <option value="C">Common</option>
        <option value="U">Uncommon</option>
        <option value="R">Rare</option>
        <option value="M">Mythic</option>
        <option value="S">Special</option>
        <option value="B">Bonus</option>
    </select>

    <select @bind="FilterParameters.ColorFilter">
        <option value="">Color</option>
        <option value="White">White</option>
        <option value="Black">Black</option>
        <option value="Blue">Blue</option>
        <option value="Red">Red</option>
        <option value="Green">Green</option>
    </select>

    <select @bind="FilterParameters.ManaCostFilter">
        <option value="">Mana Cost</option>
        @for (int i = 0; i <= 16; i++)
        {
            <option value="@i">@i</option>
        }
        <option value="1000000">1000000</option>
    </select>

    <select @bind="FilterParameters.TypeFilter">
        <option value="">Type</option>
        <option value="Artifact">Artifact</option>
        <option value="Creature">Creature</option>
        <option value="Enchantment">Enchantment</option>
        <option value="Instant">Instant</option>
        <option value="Planeswalker">Planeswalker</option>
        <option value="Sorcery">Sorcery</option>
        <option value="Land">Land</option>
        <!-- Add other types as needed -->
    </select>

    <button type="button" class="filter-btn" @onclick="FilterResults">
        Apply Filters
    </button>
    <button type="button" class="filter-btn" @onclick="ResetFilter">
        Reset
    </button>
</div>

<ul class="image-list">
    @if (bookmarkedCards != null && bookmarkedCards.Any())
    {
        @foreach (CardModelClass card in bookmarkedCards)
        {
            <li>
                <span class="card-title">
                    @card.Name <br />
                    <button class="bookmark-btn" @onclick="() => ToggleBookmark(card.Id)">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </span>
                <img width="50" src="@(!string.IsNullOrEmpty(card.OriginalImageUrl) ? card.OriginalImageUrl : "images/placeholder.png")" alt="@card.Name" />
            </li>
        }
    }
    else
    {
        <p>No bookmarked items found.</p>
    }
</ul>

@code {
    private IList<CardModelClass> myCards;
    private IList<CardModelClass> bookmarkedCards;
    private IList<long> bookmarkedItems = new List<long>();
    private string searchQuery = string.Empty;
    private FilterParameters FilterParameters = new FilterParameters();

    Services services = new Services();
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        myCards = services.GetAllCards();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            await LoadBookmarkedItemsAsync();
            FilterBookmarkedCards();
            isInitialized = true;
            StateHasChanged();
        }
    }

    private async Task LoadBookmarkedItemsAsync()
    {
        var result = await sessionStorage.GetAsync<List<long>>("bookmarkedItems");
        if (result.Success)
        {
            bookmarkedItems = result.Value ?? new List<long>();
        }
    }

    private void FilterBookmarkedCards()
    {
        bookmarkedCards = myCards.Where(card => bookmarkedItems.Contains(card.Id)).ToList();
    }

    private void FilterResults()
    {
        var query = searchQuery.ToLower();

        bookmarkedCards = myCards.Where(card =>
            bookmarkedItems.Contains(card.Id) &&
            (string.IsNullOrEmpty(FilterParameters.RarityCodeFilter) || card.RarityCode == FilterParameters.RarityCodeFilter) &&
            (string.IsNullOrEmpty(FilterParameters.ColorFilter) || (card.Colors != null && card.Colors.Contains(FilterParameters.ColorFilter))) &&
            (string.IsNullOrEmpty(FilterParameters.ManaCostFilter) || (!string.IsNullOrEmpty(card.ManaCost) && card.ManaCost.Contains(FilterParameters.ManaCostFilter))) &&
            (string.IsNullOrEmpty(FilterParameters.TypeFilter) || (!string.IsNullOrEmpty(card.Type) && card.Type.Split(", ").Contains(FilterParameters.TypeFilter))) &&
            (string.IsNullOrEmpty(searchQuery) || (!string.IsNullOrEmpty(card.Name) && card.Name.ToLower().Contains(query)))
        ).ToList();
    }

    private void ResetFilter()
    {
        FilterParameters = new FilterParameters();
        searchQuery = string.Empty;
        FilterBookmarkedCards();
    }

    private async Task ToggleBookmark(long id)
    {
        if (bookmarkedItems.Contains(id))
        {
            bookmarkedItems.Remove(id);
            bookmarkedCards = bookmarkedCards.Where(card => card.Id != id).ToList();
        }
        else
        {
            bookmarkedItems.Add(id);
        }
        await sessionStorage.SetAsync("bookmarkedItems", bookmarkedItems);
        StateHasChanged(); // Ensure the UI updates
    }
}
