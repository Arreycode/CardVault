@page "/Bookmarks"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage
@using Microsoft.EntityFrameworkCore
@using System.Linq
@using CardVault.ModelsDTO
@using CardVault.Services

<head>
    <title>Bookmarks Page</title>
    <link rel="stylesheet" href="css/MGT01.css" />
</head>

<h3>Bookmarks</h3>

<div class="search-container">
    <input type="text" class="search-field" placeholder="Search" @bind="searchQuery" @bind:event="oninput" />
    <button type="button" class="search-btn" @onclick="FilterResults">
        <i class="fas fa-search"></i> Search
    </button>
</div>


<ul class="image-list">
    @if (bookmarkedCards != null && bookmarkedCards.Any())
    {
        @foreach (CardModelClass card in bookmarkedCards)
        {
            <li>
                <span class="card-title">
                    @card.Name <br />
                    <button class="bookmark-btn" @onclick="() => ToggleBookmark(card.Id)">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                </span>
                <!-- Ensure the image path is correct and use a placeholder if it's null or empty -->
                <img width="50" src="@(!string.IsNullOrEmpty(card.OriginalImageUrl) ? card.OriginalImageUrl : "images/placeholder.png")" alt="@card.Name" />
            </li>
        }
    }
    else
    {
        <p>No bookmarked items found.</p>
    }
</ul>

protected override async Task OnInitializedAsync()
{
    myCards = services.GetAllCards();
    await LoadBookmarkedItemsAsync();
    FilterBookmarkedCards();
}
private void FilterResults()
{
    if (string.IsNullOrWhiteSpace(searchQuery))
    {
        FilterBookmarkedCards();
    }
    else
    {
        var query = searchQuery.ToLower();
        bookmarkedCards = bookmarkedCards
            .Where(card => card.Name.ToLower().Contains(query))
            .ToList();
    }
}
private async Task ToggleBookmark(long id)
{
    if (bookmarkedItems.Contains(id))
    {
        bookmarkedItems.Remove(id);
        bookmarkedCards = bookmarkedCards.Where(card => card.Id != id).ToList();
    }
    else
    {
        bookmarkedItems.Add(id);
    }
    await sessionStorage.SetAsync("bookmarkedItems", bookmarkedItems);
}
