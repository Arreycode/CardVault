<h3>redcarddetail</h3>

@inject CardVault.Services.Services services
@using CardVault.ModelsDTO
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage sessionStorage

<head>
    <title>Single Detail</title>
    <link rel="stylesheet" href="css/MGT01.css" />
</head>

<div class="card-detail-container">
    @if (redCardDetail != null)
    {
        <h3>@redCardDetail.Name</h3>
        <div class="card-detail">
            <div class="card-image">
                <img width="200" src="@(!string.IsNullOrEmpty(redCardDetail.OriginalImageUrl) ? redCardDetail.OriginalImageUrl : "default_image_url.png")" alt="@redCardDetail.Name" />
            </div>
            <div class="card-info">
                <p><strong>Mana Cost:</strong> @redCardDetail.ManaCost</p>
                <p><strong>Converted Mana Cost:</strong> @redCardDetail.ConvertedManaCost</p>
                <p><strong>Type:</strong> @redCardDetail.Type</p>
                <p><strong>Rarity Code:</strong> @redCardDetail.RarityCode</p>
                <p><strong>Set Code:</strong> @redCardDetail.SetCode</p>
                <p><strong>Colors:</strong> @(redCardDetail.Colors != null && redCardDetail.Colors.Any() ? string.Join(", ", redCardDetail.Colors) : "N/A")</p>
                <p><strong>Flavor:</strong> @redCardDetail.Flavor</p>
                <p><strong>Power:</strong> @redCardDetail.Power</p>
                <p><strong>Toughness:</strong> @redCardDetail.Toughness</p>
                <p><strong>Layout:</strong> @redCardDetail.Layout</p>
                <button class="bookmark-btn" @onclick="() => ToggleBookmark(redCardDetail.Id)">
                    <i class="@GetBookmarkIconClass(redCardDetail.Id)"></i> Bookmark
                </button>
            </div>
        </div>
    }
    else
    {
        <p>Loading...</p>
    }
</div>

<style>
    .card-detail-container {
        padding: 20px;
        font-family: Arial, sans-serif;
    }

    .card-detail {
        display: flex;
        gap: 20px;
    }

    .card-image img {
        border: 1px solid #ccc;
        border-radius: 10px;
    }

    .card-info {
        flex-grow: 1;
    }

        .card-info p {
            margin: 5px 0;
        }

    .bookmark-btn {
        color: black;
        background-color: #f0f0f0;
        border: none;
        border-radius: 5px;
        padding: 10px;
        cursor: pointer;
        font-size: 16px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .bookmark-btn i {
            font-size: 20px;
        }
</style>

@code {
    [Parameter]
    public long Id { get; set; }

    private CardModelClass? redCardDetail;
    private IList<long> bookmarkedItems = new List<long>();

    protected override async Task OnInitializedAsync()
    {
        await LoadBookmarkedItemsAsync();
        redCardDetail = services.GetCardById(Id);
    }

    private async Task LoadBookmarkedItemsAsync()
    {
        var result = await sessionStorage.GetAsync<List<long>>("bookmarkedItems");
        if (result.Success)
        {
            bookmarkedItems = result.Value ?? new List<long>();
        }
    }

    private async Task ToggleBookmark(long id)
    {
        if (bookmarkedItems.Contains(id))
        {
            bookmarkedItems.Remove(id);
        }
        else
        {
            bookmarkedItems.Add(id);
        }
        await sessionStorage.SetAsync("bookmarkedItems", bookmarkedItems);
    }

    private string GetBookmarkIconClass(long id)
    {
        return bookmarkedItems.Contains(id) ? "fas fa-heart" : "far fa-heart";
    }
}
